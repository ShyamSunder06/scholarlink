

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  studentdetails StudentDetails[]
  secondarystudentDetails SecondaryStudentDetails[]
  hscstudentdetails HSCStudentDetails[]
  ugcollegestudentdetails UGCollegeStudentDetails[]
  pgcollegestudentdetails  PGCollegeStudentDetails[]

}


model StudentDetails{
  id Int @id @default(autoincrement())
  studemail String 
  student Student @relation(fields: [studemail],references: [email],onDelete: Cascade)
  currentQualifications String
  gender String
  annualIncome Int?
  dob String
  bonafide String?
  incomecertificate String?
  salaryslip String?
  achievements String[]
  
  

}


model SecondaryStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  schoolname String
  schoollocation String
  score  Float
  annualScore String
  annualcard String?
  grade Int

}


model HSCStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  schoolname String
  schoollocation String
  sscgrade Float
  sscmarksheet String


}


model UGCollegeStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  degree String
  discipline String
  collegename String
  collegelocation String
  sscgrade Float
  sscmarksheet String
  hscgrade Float
  hscmarksheet String 
  gpa Float
  styear Int
  endyear Int


}


model PGCollegeStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  degree String
  discipline String
  collegename String
  collegelocation String
  ugcgpa Float
  degreecertificate String
  styear Int
  endyear Int

}


model Admin{
  id Int @id @default(autoincrement())
  email String @unique
  password String
  orgname String
  orglocation String
  contactno String
  yearsofservice Int?
  certificate String
  description String
  scholarship Scholarship[]
}

model Scholarship{
  id Int @id @default(autoincrement())
  name String
  providedby Int
  admin Admin @relation(fields: [providedby],references: [id],onDelete: Cascade)
  for String[]
  likes Int
  amt Int
  regstdate String
  regenddate String

}

// ["female","any","enginerr","any"]

// enum For{
//   SecondaryStudent
//   HSCStudent
//   UGStudent
//   PGStudent

// }



// eligbility : gender , community , education , income , 