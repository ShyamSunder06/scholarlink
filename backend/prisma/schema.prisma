

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  studentdetails StudentDetails[]
  secondarystudentDetails SecondaryStudentDetails[]
  hscstudentdetails HSCStudentDetails[]
  ugcollegestudentdetails UGCollegeStudentDetails[]
  pgcollegestudentdetails  PGCollegeStudentDetails[]
  appliedscholarships ScholarshipApplied[]

}


model StudentDetails{
  id Int @id @default(autoincrement())
  studemail String 
  student Student @relation(fields: [studemail],references: [email],onDelete: Cascade)
  currentQualifications String
  gender String
  annualIncome Int?
  dob String
  bonafide String?
  incomecertificate String?
  salaryslip String?
  achievements String[]
  
  

}


model SecondaryStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  schoolname String
  schoollocation String
  score  Float
  annualScore String
  annualcard String?
  grade Int

}


model HSCStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  schoolname String
  schoollocation String
  sscgrade Float
  sscmarksheet String?


}


model UGCollegeStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  degree String
  discipline String
  collegename String
  collegelocation String
  sscgrade Float
  sscmarksheet String?
  hscgrade Float
  hscmarksheet String? 
  gpa Float
  styear Int
  endyear Int


}


model PGCollegeStudentDetails{
  id Int @id @default(autoincrement())
  emailId String
  student Student @relation(fields: [emailId],references: [email],onDelete:Cascade)
  degree String
  discipline String
  collegename String
  collegelocation String
  ugcgpa Float
  degreecertificate String?
  styear Int
  endyear Int

}


model Admin{
  id Int @id @default(autoincrement())
  email String @unique
  password String
  orgname String
  adminDetails AdminDetails[]
  scholarship Scholarship[]
}

model AdminDetails{
  id Int @id @default(autoincrement())
  adminemail String
  admin Admin @relation(fields: [adminemail],references: [email],onDelete: Cascade)
  orglocation String
  contactno String
  yearsofservice Int?
  certificate String
  description String



}

model Scholarship{
  id Int @id @default(autoincrement())
  name String
  providedby Int
  admin Admin @relation(fields: [providedby],references: [id],onDelete: Cascade)
  scholarshipfor String[]
  likes Int
  amt Int
  regstdate String
  regenddate String
  description String
  procedures String[]
  appliedScholarship ScholarshipApplied[]
}


model ScholarshipApplied{
  id Int @id @default(autoincrement())
  scholarshipid Int 
  studentid String
  scholarship Scholarship @relation(fields: [scholarshipid],references: [id],onDelete: Cascade)
  student Student @relation(fields: [studentid],references: [email],onDelete: Cascade)


}

// ["female","any","enginerr","any"]

// enum For{
//   SecondaryStudent
//   HSCStudent
//   UGStudent
//   PGStudent

// }



// eligbility : gender , community , education , income , 